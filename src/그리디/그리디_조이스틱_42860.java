package 그리디;

/**
 * https://school.programmers.co.kr/learn/courses/30/lessons/42860
 * 42860 / 조이스틱
 *
 * 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
 * ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
 *
 * 조이스틱을 각 방향으로 움직이면 아래와 같습니다.
 *
 * ▲ - 다음 알파벳
 * ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
 * ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
 * ▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
 * 예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.
 *
 * - 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
 * - 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
 * - 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
 * 따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
 * 만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.
 */
public class 그리디_조이스틱_42860 {
    public static void main(String[] args) {

//        String name = "JEROEN";
        String name = "JAABAN";
        System.out.println(solution(name));
    }

    public static int solution(String name) {
        int answer = 0;
        int len = name.length();
        int minMove = len - 1;
        for (int i = 0; i < name.length(); i++) {
            char c = name.charAt(i);
            // 상하 이동으로 알파벳 변경
            // +1은 'Z’에서 'A’로 가는 한 번의 추가 이동
            answer += Math.min(c - 'A', 'Z' - c + 1);

            // 연속된 A 찾기
            int nextIdx = i + 1;
            while (nextIdx < len && name.charAt(nextIdx) == 'A') {
                nextIdx++;
            }
            // 좌우 이동 결정
            /*
                 시작 지점에서 현재 위치까지 갔다가 다시 돌아와서 끝까지 가는 최소 이동횟수 계산
                 1. 조이스틱을 오른쪽으로 i만큼 움직여 현재문자까지 이동
                 2. 왼쪽으로 돌아가서(i만큼 다시 이동) 시작지점으로 이동
                 3. 오른쪽으로 len - nextIdx 만큼 움직여 이름의 끝까지 이동

             */
            minMove = Math.min(minMove, i * 2 + len - nextIdx);
            /*
                 끝에서 연속된 'A'가 끝나는 지점까지 갔다가 다시 돌아와서 현재위치까지 가는 최소이동횟수 계산
                 1. 조이스틱을 오른쪽으로 len - nextIdx 만큼 움직여 연속된 'A'가 끝나는 지점까지 이동
                 2. 왼쪽으로 돌아가서(len - nextIdx 만큼 다시 이동) 시작지점으로 이동
                 3. 오른쪽으로 i 만큼 움직여 현재위치까지 이동
             */
            minMove = Math.min(minMove, (len - nextIdx) * 2 + i);
        }
        answer += minMove;

        return answer;
    }


}

/*
이 문제는 사용자가 주어진 이름을 만들기 위해 조이스틱을 최소한으로 움직여 알파벳을 변경하는 방법을 찾는 그리디 알고리즘 문제입니다.

각 알파벳을 A에서 시작하여 원하는 알파벳으로 변경할 때, 위 또는 아래로 움직여 가장 가까운 경로를 찾아야 하며, 좌우 이동을 통해 다음 알파벳으로 이동할 수 있습니다.

1. **상하 이동 최소화**: 각 알파벳에 대해 위쪽으로 이동하는 것과 아래쪽으로 이동하는 것 중 더 적은 횟수로 도달할 수 있는 방법을 찾습니다.
2. **좌우 이동 최소화**: 연속된 A의 시퀀스를 찾아서 뒤로 돌아가는 것이 더 빠른지, 아니면 계속 앞으로 가는 것이 더 빠른지를 결정합니다.

### 상하 이동

- `answer += Math.min(c - 'A', 'Z' - c + 1);`
    - **`1`**을 더하는 이유는 알파벳 ‘Z’ 다음에 'A’가 오는 것을 고려하기 위함입니다. 조이스틱으로 알파벳을 변경할 때, 'A’에서 'Z’로 가는 것이 'A’로부터 위로 가는 것보다 빠를 수 있기 때문이죠.
    - 예를 들어, 'A’에서 'Z’로 변경하려면 위로 25번 이동해야 하지만, 아래로는 단 1번만 이동하면 됩니다. 따라서, **`Math.min(c - 'A', 'Z' - c + 1)`**는 'A’에서 시작하여 'Z’로 가는 데 필요한 최소 이동 횟수를 계산합니다. 여기서 **`+1`**은 'Z’에서 'A’로 가는 한 번의 추가 이동을 나타냅니다.

### 좌우 이동

- `minMove = Math.min(minMove, i * 2 + len - nextIndex)`
    - 현재 위치에서 시작하여 왼쪽으로 돌아가서 연속된 'A’가 끝나는 지점까지 이동한 다음, 오른쪽으로 다시 끝까지 이동하는 경우의 이동 횟수를 계산합니다. **`i * 2`**는 현재 위치에서 시작하여 처음으로 돌아가는 이동 횟수를 나타내고, **`len - nextIndex`**는 연속된 'A’가 끝나는 지점부터 끝까지 이동하는 횟수를 나타냅니다.
- `minMove = Math.min(minMove, (len - nextIndex) * 2 + i);`
    - 오른쪽으로 계속 이동하여 연속된 'A’가 끝나는 지점까지 가고, 그 후 왼쪽으로 돌아와서 시작 지점으로 이동하는 경우의 이동 횟수를 계산합니다. **`(len - nextIndex) * 2`**는 연속된 'A’가 끝나는 지점부터 끝까지 그리고 다시 시작 지점으로 돌아오는 이동 횟수를 나타내고, **`i`**는 처음부터 현재 위치까지의 이동 횟수를 나타냅니다.
 */